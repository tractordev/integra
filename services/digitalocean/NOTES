TODO:
* unwrap gets in object with key name of resource (floating_ip, image, etc)


listings:

per_page: integer (in: query)
page: integer (in: query)

{
  "images": [
    
  ],
  "links": {
    "pages": {
      "last": "https://api.digitalocean.com/v2/images?page=14",
      "next": "https://api.digitalocean.com/v2/images?page=2"
    }
  },
  "meta": {
    "total": 264
  }
}

====
operationIDs are almost consistent enough to get operation names AND resources...
examples where it works easily:

vpcs_list
vpcs_create
vpcs_delete
vpcs_get
vpcs_patch
vpcs_update
vpcs_list_members

tags_list
tags_create
tags_delete
tags_get
tags_unassign_resources
tags_assign_resources

where it works but has.. quirks:

volumeActions_post
volumeSnapshots_delete_byId
volumeSnapshots_get_byId

projects_list
projects_create
projects_get_default
projects_patch_default
projects_update_default
projects_list_resources_default
projects_assign_resources_default

invoices_get_byUUID
invoices_get_csvByUUID
invoices_get_pdfByUUID
invoices_get_summaryByUUID

registry_update_subscription
registry_validate_name
registry_get_garbageCollection
registry_run_garbageCollection
registry_update_garbageCollection
registry_list_garbageCollections
registry_list_repositories
registry_list_repositoriesV2
registry_list_repositoryManifests
registry_delete_repositoryManifest
registry_list_repositoryTags
registry_delete_repositoryTag

=====

2024/11/15 17:59:33 openapi.go:133: !! more than 2 paths for 'registryGarbageCollection':
2024/11/15 17:59:33 openapi.go:135:    /v2/registry/{registry_name}/garbage-collection get,post
2024/11/15 17:59:33 openapi.go:135:    /v2/registry/{registry_name}/garbage-collection/{garbage_collection_uuid} put
2024/11/15 17:59:33 openapi.go:135:    /v2/registry/{registry_name}/garbage-collections get

registryGarbageCollection
    list
    get
    create
    setWithGarbageCollectionUUID

## RESOLVED, good enough for now?

get     Get Active Garbage Collection
post    Start Garbage Collection
set     Update Garbage Collection
list    List Garbage Collections

====

2024/11/15 17:59:33 openapi.go:179: !! undetectable paths for 'appMetricBandwidthDaily':
2024/11/15 17:59:33 openapi.go:181:    /v2/apps/metrics/bandwidth_daily  post (report)
2024/11/15 17:59:33 openapi.go:181:    /v2/apps/{app_id}/metrics/bandwidth_daily get

appMetric??
appMetricBandwidthDaily
    create
    get

## RESOLVED but using post for now:

post    Retrieve Multiple Apps' Daily Bandwidth Metrics
get     Retrieve App Daily Bandwidth Metrics


====
2024/11/15 17:59:33 openapi.go:133: !! more than 2 paths for 'volumeAction':
2024/11/15 17:59:33 openapi.go:135:    /v2/volumes/actions
2024/11/15 17:59:33 openapi.go:135:    /v2/volumes/{volume_id}/actions
2024/11/15 17:59:33 openapi.go:135:    /v2/volumes/{volume_id}/actions/{action_id}

2024/11/15 17:59:33 openapi.go:133: !! more than 2 paths for 'dropletAction':
2024/11/15 17:59:33 openapi.go:135:    /v2/droplets/actions post(bulk)
2024/11/15 17:59:33 openapi.go:135:    /v2/droplets/{droplet_id}/actions get,post
2024/11/15 17:59:33 openapi.go:135:    /v2/droplets/{droplet_id}/actions/{action_id} get

DropletAction
    list
    create
    get
    createBulk??

## update:
better, but now there are ambiguous creates for dropletAction and volumeAction:

Collection URLs:    https://api.digitalocean.com/v2/volumes/actions, https://api.digitalocean.com/v2/volumes/{volume_id}/actions
Item URLs:          https://api.digitalocean.com/v2/volumes/{volume_id}/actions/{action_id}

=== RESOURCE OPERATIONS
create    Initiate A Block Storage Action By Volume Name
list      List All Actions for a Volume
create    Initiate A Block Storage Action By Volume Id
get       Retrieve an Existing Volume Action

## RESOLVED

=====
2024/11/15 17:59:33 openapi.go:179: !! undetectable paths for 'kuberneteClusterUpgrade':
2024/11/15 17:59:33 openapi.go:181:    /v2/kubernetes/clusters/{cluster_id}/upgrade post
2024/11/15 17:59:33 openapi.go:181:    /v2/kubernetes/clusters/{cluster_id}/upgrades get

kubernetesClusterUpgrade
    list
    create

## RESOLVED, but post instead of create for now

=======

floatingIP.get wants a "floating_ip" which is the "ip" of a list entry. not only
a case of a non-ID key, but i guess a service specific "name" key. 

floatingIP.list
  0 floating_ips, [project_id] => map[floating_ip:] 

--

similarish, domain.list entries have a "name" but domain.get wants "domain_name"...
seems specific to resource but where one might guess it to be "name" or "domain"
this shows a probably common case of "domain_name" or "(resource)_name"

domain.list
  0 domains, [] => map[domain_name:] 

--

database.list
  0 databases, [id private_network_uuid project_id] => map[database_cluster_uuid:id] 

just pointing out that this was a correct guess. even though it wants a "uuid", the
"id" field is a uuid. 

--

an exact match should be the answer!

invoice.list
  20 invoices, [invoice_uuid] => map[invoice_uuid:] 

----
added "Bulk" suffix to operation name duplicates (puts on shorter path), assuming
more likely to be more general. but here is an example where its not quite right:

digitalocean.volumeAction

createBulk    Initiate A Block Storage Action By Volume Name

its not bulk, its ByName

here are other resources Bulk suffix is added in digitalocean:


droplet (only one that works with "Bulk")
dropletAction (also basically works)
volume (also wrong, should be "by name")

UPDATE: commented this strategy out for now, back to duplicate operation names

## RESOLVED with forcedOpNames

--
====

uptimeCheck.list
  ERROR: no listing found in response

listing is under "checks" key but resource name is "uptimeCheck", no parent.
need name variant generator to break words apart...

## RESOLVED, but now:

monitoringAlert.list
  ERROR: no listing found in response

listing is under "policies", totally unrelated name. need manual listing keys.
also:

accountKey.list
  ERROR: no listing found in response

listing is under "ssh_keys"

maybe go back to look for array prop?

===

tag.list
  SKIP: unable to determine key props for getter: tag_id

listing output has no id, but has name. tag_id is actually tag_name!